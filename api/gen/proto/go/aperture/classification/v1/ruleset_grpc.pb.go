// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package classificationv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RulesServiceClient is the client API for RulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RulesServiceClient interface {
	AllRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRulesResponse, error)
}

type rulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRulesServiceClient(cc grpc.ClientConnInterface) RulesServiceClient {
	return &rulesServiceClient{cc}
}

func (c *rulesServiceClient) AllRules(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllRulesResponse, error) {
	out := new(AllRulesResponse)
	err := c.cc.Invoke(ctx, "/aperture.classification.v1.RulesService/AllRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServiceServer is the server API for RulesService service.
// All implementations should embed UnimplementedRulesServiceServer
// for forward compatibility
type RulesServiceServer interface {
	AllRules(context.Context, *emptypb.Empty) (*AllRulesResponse, error)
}

// UnimplementedRulesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRulesServiceServer struct {
}

func (UnimplementedRulesServiceServer) AllRules(context.Context, *emptypb.Empty) (*AllRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRules not implemented")
}

// UnsafeRulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RulesServiceServer will
// result in compilation errors.
type UnsafeRulesServiceServer interface {
	mustEmbedUnimplementedRulesServiceServer()
}

func RegisterRulesServiceServer(s grpc.ServiceRegistrar, srv RulesServiceServer) {
	s.RegisterService(&RulesService_ServiceDesc, srv)
}

func _RulesService_AllRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).AllRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.classification.v1.RulesService/AllRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).AllRules(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RulesService_ServiceDesc is the grpc.ServiceDesc for RulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.classification.v1.RulesService",
	HandlerType: (*RulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllRules",
			Handler:    _RulesService_AllRules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/classification/v1/ruleset.proto",
}
